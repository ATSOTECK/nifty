
fn add(a, b int) int {
    ret := a + b
    return ret
}

fn main() int {
    return add(2, 2)
}

typedef NewUser struct {
    name: string,
    age: int,
}

typedef User struct {
    ...NewUser,
    id: string,
}

/-

a: {
    name: "a",
    fileName: "scratch.nifty",
    kind: int
    mutable: false
    valueSet: false

}
b
ret

-/

fmt::println("Putting {fmt::green}{filename}{fmt::reset} message.")
// The above could be auto converted into below during compilation.
fmt::println("Putting {}{}{} message.", fmt::green, filename, fmt::reset)
// Or
fmt::println("Putting {:green}{filename}{:reset} message.")
// Which would be compiled to
fmt::println("Putting {:green}{}{:reset} message.", filename)

// To do formatting use a colon after the opening brace.
x ::= 1.234567
fmt::println("{:.3}", x)
fmt::println("{x:.3}")

using map

fn main() {
    map := Map<string, int>{}
    a := map.get("thing")
    b := map.get("other", 12)
}

package nsl namespace map

typedef Map<typename T, typename U> struct {
    //
}

constimpl Map<typename T, typename U>

md getValue(key: T): U? {}
md getWithDefault(key: T, default: U): U {}

md get overloads {getValue, getWithDefault}

md set(key: T): bool {}
md erase(key: T): bool {}

endimpl

use net::http;
use os;
using fmt;
use { green, reset } in fmt::colors;

fn put_message(filename: string): error {
    println("Putting {green}{filename}{reset} message.");
    data ::= try os::read_file("{filename}.json");
    resp ::= try http::put("localhost:4001/prerecorded_messages", { "Content-Type": "application/json" }, data);
    println(resp);
}

fn put_message(filename: string): error {
    println("Putting {green}{filename}{reset} message.");
    data ::= try os::read_file("{filename}.json");
    req := try http::new_request(http::Method::Put, "localhost:4001/prerecorded_messages");
    req.header.set("Content-Type", "application/json");
    req.payload = data;
    
    resp ::= try http::send(req);
    
    println(resp);
}

fn put_message(filename: string): error {
    println("Putting {green}{filename}{reset} message.");
    data ::= try os::read_file("{filename}.json");
    resp ::= try http::request(http::Method::Put, "localhost:4001/prerecorded_messages", { "Content-Type": "application/json" }, data);
    println(resp);
}

fn main() {
    err ::= put_message("sub-req");
    if err != 0 {
        panic(err);
    }
}

