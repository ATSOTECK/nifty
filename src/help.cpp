//
// Created by Skyler Burwell on 6/5/25.
//

#include "help.hpp"

#include "common.hpp"
#include "util.hpp"

void print_help(const std::string &cmd) {
    constexpr int width = 25;
    const bool printAll = cmd == "all";
    println("Nifty Programming Language\n");

    if (cmd == "build" || printAll) {
        println("Usage: nifty build <inputs> <flags>");
        printStringsWithSpacer("\tnifty build <string>", '-', "Build the default or specified target.", width);
        dbln();
        println("Examples:");
        printStringsWithSpacer("\tnifty build", '-', "Builds the default target in 'build.toml'.", width); // TODO: NIFTY_BUILD_FILE
        printStringsWithSpacer("\tnifty build main.nifty", '-', "Builds 'main.nifty'.", width);
        printStringsWithSpacer("\tnifty build editor", '-', "Builds the target 'editor' in 'build.toml'.", width); // TODO: NIFTY_BUILD_FILE
        dbln();
        println("Build specific flags:");
        printStringsWithSpacer("\t--all", '-', "Builds all the targets in the build file.", width);

        if (!printAll) {
            return;
        }
    }

    if (cmd == "run" || printAll) {
        if (printAll) {
            dbln();
        }

        println("Usage: nifty run <inputs> <flags>");
        printStringsWithSpacer("\tnifty run <string>", '-', "Build and run the default or specified target.", width);
        dbln();
        println("Examples:");
        printStringsWithSpacer("\tnifty run", '-', "Builds and runs the default target in 'build.toml'.", width); // TODO: NIFTY_BUILD_FILE
        printStringsWithSpacer("\tnifty run main.nifty", '-', "Builds and runs 'main.nifty'.", width);
        printStringsWithSpacer("\tnifty run editor", '-', "Builds and runs the target 'editor' in 'build.toml'.", width); // TODO: NIFTY_BUILD_FILE

        if (!printAll) {
            return;
        }
    }

    if (cmd == "clean" || printAll) {
        if (printAll) {
            dbln();
        }

        println("Usage: nifty clean <inputs> <flags>");
        printStringsWithSpacer("\tnifty clean <string>", '-', "Delete compiled files for the project or target.", width);
        dbln();
        println("Examples:");
        printStringsWithSpacer("\tnifty clean", '-', "Cleans the default target in 'build.toml'.", width); // TODO: NIFTY_BUILD_FILE
        printStringsWithSpacer("\tnifty clean editor", '-', "Cleans the target 'editor' in 'build.toml'.", width); // TODO: NIFTY_BUILD_FILE
        dbln();
        println("Clean specific flags:");
        printStringsWithSpacer("\t--all", '-', "Cleans all the targets in the build file.", width);

        if (!printAll) {
            return;
        }
    }

    if (cmd == "new" || printAll) {
        if (printAll) {
            dbln();
        }

        println("Usage: nifty new <flags>");
        printStringsWithSpacer("\tnifty new", '-', "Creates a new nifty project in the current directory.", width);
        dbln();
        println("Project Info:");
        printStringsWithSpacer("\tProject name", '-', "Name of the project. May not contain whitespace.", width);
        printStringsWithSpacer("\tProject version", '-', "Starting version of the project. May not contain whitespace. Optional.", width);
        printStringsWithSpacer("\tEntry point", '-', "The file containing the default entry point. May not contain whitespace.", width);
        printStringsWithSpacer("\tAuthor", '-', "Name of the person or organization developing the project. Optional.", width);
        printStringsWithSpacer("\tLicense", '-', "The license for this project. A license.md file will be autogenerated. Optional.", width);
        dbln();
        println("Licences:");
        printStringsWithSpacer("\tSPDX short identifier)", '-', "(Description)", width);
        printStringsWithSpacer("\tApache-2.0", '-', "Apache License, Version 2.0", width);
        printStringsWithSpacer("\tBSD-3-Clause", '-', "The 3-Clause (New) BSD License also called Modified BSD License", width);
        printStringsWithSpacer("\tBSD-2-Clause", '-', "The 2-Clause (Simplified) BSD License also called FreeBSD License", width);
        printStringsWithSpacer("\tGPL-2.0", '-', "GNU General Public License version 2", width);
        printStringsWithSpacer("\tGPL-3.0-only", '-', "GNU General Public License version 3", width);
        printStringsWithSpacer("\tLGPL-2.1", '-', "GNU Lesser General Public License version 2.1", width);
        printStringsWithSpacer("\tLGPL-3.0", '-', "GNU Lesser General Public License version 3", width);
        printStringsWithSpacer("\tMIT", '-', "The MIT License", width);
        printStringsWithSpacer("\tMPL-2.0", '-', "Mozilla Public License 2.0", width);
        printStringsWithSpacer("\tCDDL-1.0", '-', "Common Development and Distribution License 1.0", width);
        printStringsWithSpacer("\tEPL-2.0", '-', "Eclipse Public License version 2.0", width);
        printStringsWithSpacer("\tZlib", '-', "The zlib/libpng License (Zlib)", width);
        dbln();
        println("License identifiers are not case sensitive.");
        println("Other licenses can be used but you must provide them.");
        dbln();
        println("New specific flags:");
        printStringsWithSpacer("\t--no-git", '-', "Creates the project without initializing a git repository.", width);

        if (!printAll) {
            return;
        }
    }

    if (cmd == "test" || printAll) {
        if (printAll) {
            dbln();
        }

        println("Usage: nifty test <inputs> <flags>");
        printStringsWithSpacer("\tnifty test <string>", '-', "Build and run all tests in the default or specified target.", width);
        dbln();
        println("Examples:");
        printStringsWithSpacer("\tnifty test", '-', "Builds and runs all tests in the default target in 'build.toml'.", width); // TODO: NIFTY_BUILD_FILE
        printStringsWithSpacer("\tnifty test editor", '-', "Builds and runs all tests in the target 'editor' in 'build.toml'.", width); // TODO: NIFTY_BUILD_FILE
        dbln();
        println("Test specific flags:");
        printStringsWithSpacer("\t-file <string>", '-', "Builds and runs all the tests in the specified file.", width);
        printStringsWithSpacer("\t-name <string>", '-', "Builds and runs the specified test.", width);
        printStringsWithSpacer("\t-prefix <string>", '-', "Builds and runs all tests with the given prefix.", width);

        if (!printAll) {
            return;
        }
    }

    if (cmd == "docs" || printAll) {
        if (printAll) {
            dbln();
        }

        println("docs");
        println("\tTODO");

        if (!printAll) {
            return;
        }
    }

    if (cmd == "version" || printAll) {
        if (printAll) {
            dbln();
        }

        printStringsWithSpacer("version", '-', "Prints the nifty version.", width);

        if (!printAll) {
            return;
        }
    }

    if (cmd == "info" || printAll) {
        if (printAll) {
            dbln();
        }

        printStringsWithSpacer("info", '-', "Prints nifty compiler information.", width);

        if (!printAll) {
            return;
        }
    }

    if (cmd == "list" || printAll) {
        if (printAll) {
            dbln();
        }

        printStringsWithSpacer("list", '-', "Lists all the targets in the build file.", width);

        if (!printAll) {
            return;
        }
    }

    if (cmd == "flags" || printAll) {
        if (printAll) {
            dbln();
        }

        println("Flags:");
        printStringsWithSpacer("\t--disable-colors", '-', "Disables color output to the terminal.", width);

        if (!printAll) {
            return;
        }
    }

    if (cmd == "env" || printAll) {
        if (printAll) {
            dbln();
        }

        println("Environment variables checked by the compiler:");
        printStringsWithSpacer("\tNIFTY_DISABLE_COLORS", '-', "Disables color output to the terminal if defined.", width);

        if (!printAll) {
            return;
        }
    }

    if (cmd == "config" || printAll) {
        if (printAll) {
            dbln();
        }

        println("config");
        println("\tTODO");

        if (!printAll) {
            return;
        }
    }

    if (cmd == "colors" || printAll) {
        if (printAll) {
            dbln();
        }

        println("Colors:");
        println("Because colors will be different for different terminal configurations you may not like the default");
        println("color choices or they may not be easily readable. Because of this the colors can be overwritten in");
        println("the compiler config file. Run 'nifty help config' for information on configuration.");
        println("This command prints out a sentence in 256 colors with the code at the end.");
        println("The following can be changed:");
        printStringsWithSpacer("\terrorColor <number>", '-', "Sets the error color.", width);
        printStringsWithSpacer("\twarnColor <number>", '-', "Sets the warning color.", width);
        printStringsWithSpacer("\tlineColor <number>", '-', "Sets the squiggly line color for warnings/errors.", width);
        printStringsWithSpacer("\thighlightColor <number>", '-', "Sets the color for highlighting text in messages.", width);

        if (!printAll) {
            return;
        }
    }

    if (cmd == "help") {
        println("Huh?");
        return;
    }

    if (cmd == "me") {
        println("I wish I could :(");
        return;
    }

    if (cmd == "definition") {
        if (printAll) {
            dbln();
        }

        println("nifty\tnif*ty");
        printStringsWithSpacer("adjective", '-', "Particularly good, skillful, or effective.", width);
        printStringsWithSpacer("adjective", '-', "Fashionable; stylish.", width);

        return;
    }

    if (!cmd.empty() && !printAll) {
        println("Unknown help input '{}'.\n", cmd);
    }

    if (printAll) {
        dbln();
    }

    println("Usage: nifty [command] <inputs> <flags>\n");
    println("Commands:");
    printStringsWithSpacer("\tbuild", '-', "Build the default or specified target.", width);
    printStringsWithSpacer("\trun", '-', "Build and run the default or specified target.", width);
    printStringsWithSpacer("\tclean", '-', "Delete compiled files for the project or target.", width);
    printStringsWithSpacer("\thelp", '-', "Show this help information or information on the specified command.", width);
    printStringsWithSpacer("\tnew", '-', "Create new Nifty project in the current directory.", width);
    printStringsWithSpacer("\ttest", '-', "Build and run all tests in the default or specified target.", width);
    printStringsWithSpacer("\tdocs", '-', "Generate documentation from the default or specified target.", width);
    printStringsWithSpacer("\tversion", '-', "Prints Nifty version info.", width);
    printStringsWithSpacer("\tinfo", '-', "Prints information about the Nifty compiler.", width);
    printStringsWithSpacer("\tlist", '-', "List all of the targets for the build file in the current directory.", width);
    printStringsWithSpacer("\tcolors", '-', "Color codes can be set in the nifty config file, prints colors for reference.", width);
    dbln();
    println("To see a list of flags run 'nifty help flags'.");
    println("To see a list of environment variables used by nifty run 'nifty help env'.");
    println("To see a list of config options for the nifty compiler and nifty projects run `nifty help config'.");
    println("To show all help run 'nifty help all'.");
    dbln();
    println("If no command is given Nifty will build and run the default target from '{}'.", NIFTY_BUILD_FILE);
}

