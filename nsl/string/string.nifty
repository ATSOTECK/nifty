/-
 | Nifty - Nifty Programming Language
 | Copyright (c) 2024 Skyler Burwell
 |
 | This software is provided 'as-is', without any express or implied
 | warranty. In no event will the authors be held liable for any damages
 | arising from the use of this software.
 |
 | Permission is granted to anyone to use this software for any purpose,
 | including commercial applications, and to alter it and redistribute it
 | freely, subject to the following restrictions:
 |
 | 1. The origin of this software must not be misrepresented; you must not
 |    claim that you wrote the original software. If you use this software
 |    in a product, an acknowledgment in the product documentation would be
 |    appreciated but is not required.
 | 2. Altered source versions must be plainly marked as such, and must not be
 |    misrepresented as being the original software.
 | 3. This notice may not be removed or altered from any source distribution.
 |
-/

namespace string

use ascii
use iter

typedef String struct {
    _len: int // Number of characters in the string
    _allocated: int // 
    _size: int
    _str: [^]u8
}

impl String does iter::Iterable<char>

md len(): int {
    return _len
}

md cap(): int {
    return _cap
}

md size(): int {
    return _size
}

md isEmpty(): bool {
    return _len == 0
}

md isUpper[str: string](): bool {
    for (val c in str) {
        if (!ascii::isUpper(c)) {
            return false
        }
    }
    
    return true
}

#[overloads("==")]
md equal(other: string): bool {
    if (_len != other._len) {
        return false
    }
    
    //strcmp? memcmp?
    return true
}

md offsetForCharIndex(index: int): s64 {
    if (index > _len) {
        return -1
    }
    
    if (index == 0) {
        return 0
    }
    
    let c, i, l: int = undefined
    for (l = 0, i = 0; i < _size)
}

md at(index: int): char {
    //
}

endimpl
